{"version":3,"sources":["components/App/Spinner/Spinner.module.scss","redux/actions/types.js","redux/reducers/weatherReducer.js","redux/reducers/index.js","Root.js","redux/actions/weatherActions.js","components/App/Header/SearchBar/index.js","components/App/Header/Nav/index.js","components/App/Header/index.js","helpers/findUserLocation.js","components/App/Spinner/index.js","components/App/WeatherList/index.js","components/App/index.js","components/App/WeatherCharts/Chart/index.js","components/App/WeatherCharts/index.js","index.js"],"names":["module","exports","spinner","FETCH_WEATHER_BEGIN","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","initialState","weather","loading","error","rootReducer","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","payload","store","createStore","applyMiddleware","thunk","logger","API_KEY","fetchWeather","region","_ref","latitude","longitude","getDataByCity","concat","getDataByCoords","location","dispatch","axios","get","then","response","fetchWeatherSuccess","catch","fetchWeatherFailure","data","message","SearchBar","city","onInputChange","e","_this","setState","target","value","onFormSubmit","preventDefault","props","react_default","a","createElement","onSubmit","this","htmlFor","id","placeholder","onChange","onClick","Component","connect","bindActionCreators","Nav","className","Link","to","cityName","name","Header_Nav","Header_SearchBar","findUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","code","PERMISSION_DENIED","console","Error","Spinner","styles","WeatherList","renderWeather","day","key","v4","dt_txt","main","temp","toFixed","pressure","humidity","list","Fragment","map","App_Spinner","App","_this$props","App_WeatherList","Chart","build","height","width","color","_","round","sum","units","WeatherCharts","temps","Math","trunc","pressures","humidities","WeatherCharts_Chart","_this2","ReactDOM","render","children","es","BrowserRouter","App_Header","Switch","Route","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.7ec042ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1-O9Z\"};","export const GET_LOCATION = 'GET_LOCATION';\n\nexport const FETCH_WEATHER_BEGIN = 'FETCH_WEATHER_BEGIN';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';\n","import {\n  FETCH_WEATHER_BEGIN,\n  FETCH_WEATHER_FAILURE,\n  FETCH_WEATHER_SUCCESS\n} from 'redux/actions/types';\n\nconst initialState = {\n  weather: [],\n  loading: false,\n  error: null,\n};\n\nexport default function data(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_WEATHER_BEGIN:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_WEATHER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        weather: action.payload,\n      };\n\n    case FETCH_WEATHER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport weather from 'redux/reducers/weatherReducer';\n\nconst rootReducer = combineReducers({\n  weather\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootReducer from 'redux/reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default ({ children }) => {\n  return (\n    <Provider store={store}>\n      {children}\n    </Provider>\n  );\n}\n","import axios from 'axios';\nimport { \n  FETCH_WEATHER_BEGIN,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from 'redux/actions/types';\n\nconst googolemapkey = 'AIzaSyDY5kZJmnORrvm1IODYBdB4sYjTOt6_maQ';\nconst API_KEY = '1d1ed4c5c279b3103998e234955244b6';\n\nexport function fetchWeather(region) {\n  const { latitude, longitude } = region || {};\n\n  const getDataByCity = `https://api.openweathermap.org/data/2.5/forecast?q=${region}&appid=${API_KEY}`;\n  const getDataByCoords = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n\n  let location = typeof(region) === \"object\" ? getDataByCoords : getDataByCity;\n\n  return dispatch => {\n    axios.get(location)\n    .then(response => {\n      dispatch(fetchWeatherSuccess(response));\n      return response; \n    })\n    .catch(error => dispatch(fetchWeatherFailure(error)));\n  };\n}\n\nexport const fetchWeatherBegin = () => ({\n  type: FETCH_WEATHER_BEGIN\n});\n\nexport const fetchWeatherSuccess = response => ({\n  type: FETCH_WEATHER_SUCCESS,\n  payload: response.data\n});\n\nexport const fetchWeatherFailure = error => ({\n  type: FETCH_WEATHER_FAILURE,\n  payload: error.message\n});","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchWeather } from 'redux/actions/weatherActions';\n\nclass SearchBar extends Component {\n  state = { city: '' }\n\n  onInputChange = e => {\n    this.setState({ city: e.target.value });\n  }\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    this.props.fetchWeather(this.state.city);\n    this.setState({ city: '' });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <label htmlFor=\"city\">Change city: </label>\n        <input\n          type=\"text\"\n          id=\"city\"\n          value={this.state.city}\n          placeholder={this.props.city}\n          onChange={this.onInputChange}\n        />\n        <button type=\"submit\" onClick={this.onFormSubmit}>></button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    weather: state.weather\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ fetchWeather }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav>\n        <ul className=\"navbar\">\n          <li className=\"navbar-item\"><Link to='/'>Hourly details</Link></li>\n          <li className=\"navbar-item\"><Link to='/charts'>Charts</Link></li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions/weatherActions';\n\nimport SearchBar from 'components/App/Header/SearchBar';\nimport Nav from 'components/App/Header/Nav';\n\nconst Header = props => {\n  const cityName = props.weather.city ? props.weather.city.name : '';\n  return (\n    <header>\n      <h3>Weather forecast for {cityName}</h3>\n      <Nav />\n      <SearchBar city={cityName} />\n    </header>\n  );\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","export default new Promise((resolve, reject) => {\n  if (\"geolocation\" in navigator) {\n    navigator.geolocation.getCurrentPosition((position) => {\n      resolve(position.coords);\n    }, (error) => {\n      if(error.code === error.PERMISSION_DENIED) {\n        console.error(\"Error detecting location\");\n      }\n    });\n  } else {\n    reject(new Error('Error fetching data'));\n  }\n});\n","import React from 'react';\nimport styles from './Spinner.module.scss';\n\nconst Spinner = () => {\n  return <div className={styles.spinner}></div>;\n}\n\nexport default Spinner;\n","import React, { Component } from 'react';\n// import Geocode from 'react-geocode';\nimport { v4 } from 'node-uuid';\nimport Spinner from 'components/App/Spinner';\nimport 'bulma/css/bulma.css'\n\nclass WeatherList extends Component {\n  // componentDidMount() {\n    \n  //   Geocode.setApiKey(\"AIzaSyDY5kZJmnORrvm1IODYBdB4sYjTOt6_maQ\");\n \n  //   // Get address from latidude & longitude.\n  //   Geocode.fromLatLng(\"21\", \"53\").then(\n  //     response => {\n  //       const address = response.results[0].formatted_address;\n  //       console.log(address);\n  //     },\n  //     error => {\n  //       console.error(error);\n  //     }\n  //   );\n  // }\n\n  renderWeather = (day) => {\n    return (\n      <tr key={v4()}>\n        <td>{day.dt_txt}</td>\n        <td>{(day.main.temp - 273.15).toFixed(2)} °C</td>\n        <td>{day.main.pressure} hPa</td>\n        <td>{day.main.humidity}%</td>\n      </tr>\n    );\n  }\n\n  render() {\n    if (!this.props.weather.list) {\n      return <Spinner />;\n    }\n\n    return (\n      <>\n        <table className=\"table\">\n          <thead className=\"has-background-light\">\n            <tr>\n              <th>Time</th>\n              <th>Temperature</th>\n              <th>Pressure </th>\n              <th>Humidity</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.weather.list.map(this.renderWeather)}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n}\n\nexport default WeatherList;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions/weatherActions';\nimport findUserLocation from 'helpers/findUserLocation';\n\nimport Spinner from 'components/App/Spinner';\nimport WeatherList from 'components/App/WeatherList';\n\nclass App extends Component {\n  componentDidMount() {\n    findUserLocation.then(location => this.props.fetchWeather(location));\n  }\n\n  render() {\n    const { error, loading, weather } = this.props;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n    \n    return (\n      <section className=\"section\">\n        {\n          loading\n          ? <Spinner />\n          : <WeatherList weather={weather}/>\n        }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import _ from \"lodash\";\nimport React from \"react\";\nimport {\n  Sparklines,\n  SparklinesLine,\n  SparklinesReferenceLine\n} from \"react-sparklines\";\n\nconst average = data => _.round(_.sum(data) / data.length);\n\nconst Chart = props => {\n  return (\n    <>\n      <Sparklines height={120} width={180} data={props.data}>\n        <SparklinesLine color={props.color} />\n        <SparklinesReferenceLine type=\"avg\" />\n      </Sparklines>\n      <p>Average: {average(props.data)} {props.units}</p>\n    </>\n  );\n};\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport { v4 } from 'node-uuid';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions/weatherActions';\nimport findUserLocation from 'helpers/findUserLocation';\n\nimport Chart from 'components/App/WeatherCharts/Chart';\nimport Spinner from 'components/App/Spinner';\n\nclass WeatherCharts extends Component {\n  componentDidMount() {\n    findUserLocation.then(location => this.props.fetchWeather(location));\n  }\n\n  renderWeather = (data) => {\n    const temps = data.list.map(weather => Math.trunc(weather.main.temp - 273.15));\n    const pressures = data.list.map(weather => weather.main.pressure);\n    const humidities = data.list.map(weather => weather.main.humidity);\n\n    return (\n      <tr key={v4()}>\n        <td><Chart data={temps} color=\"orange\" units=\"°C\" /></td>\n        <td><Chart data={pressures} color=\"green\" units=\"hPa\" /></td>\n        <td><Chart data={humidities} color=\"black\" units=\"%\" /></td>\n      </tr>\n    );\n  }\n\n  render() {\n    if (!this.props.weather.list) {\n      return <Spinner />;\n    }\n\n    return (\n      <table className=\"table\">\n        <thead className=\"has-background-light\">\n          <tr>\n            <th>Temperature</th>\n            <th>Pressure </th>\n            <th>Humidity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.renderWeather(this.props.weather)}\n        </tbody>\n      </table>\n    );\n  };\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCharts);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Root from 'Root';\nimport Header from 'components/App/Header';\nimport App from 'components/App';\nimport WeatherCharts from 'components/App/WeatherCharts';\n\nReactDOM.render(\n  <Root>\n    <BrowserRouter>\n      <>\n        <Header />\n        <Switch>\n          <Route path=\"/charts\" component={WeatherCharts} />\n          <Route path=\"/\" component={App} />\n        </Switch>\n      </>\n    </BrowserRouter>\n  </Root>,\n  document.getElementById('root')\n);"],"sourceRoot":""}