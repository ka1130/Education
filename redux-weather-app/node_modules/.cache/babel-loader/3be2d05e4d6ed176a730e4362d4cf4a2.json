{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_WEATHER_BEGIN, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from 'redux/actions/types';\nvar googolemapkey = 'AIzaSyDY5kZJmnORrvm1IODYBdB4sYjTOt6_maQ';\nvar API_KEY = '1d1ed4c5c279b3103998e234955244b6'; // const GEOLOCATED_URL =  `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=${API_KEY}`\n// const ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n// const city = 'Warsaw';\n// const url = `${ROOT_URL}&q=${city},pl`;\n// pass argument: location to fetchWeather, then use it with geolocation\n\nexport function fetchWeather(region) {\n  var _ref = region || {},\n      latitude = _ref.latitude,\n      longitude = _ref.longitude;\n\n  var getDataByCity = \"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(region, \"&appid=\").concat(API_KEY);\n  var getDataByCoords = \"https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(latitude, \"&lon=\").concat(longitude, \"&appid=\").concat(API_KEY);\n  var location = typeof region === \"object\" ? getDataByCoords : getDataByCity;\n  return function (dispatch) {\n    axios.get(location).then(function (response) {\n      dispatch(fetchWeatherSuccess(response));\n      return response;\n    }).catch(function (error) {\n      return dispatch(fetchWeatherFailure(error));\n    });\n  };\n}\nexport var fetchWeatherBegin = function fetchWeatherBegin() {\n  return {\n    type: FETCH_WEATHER_BEGIN\n  };\n};\nexport var fetchWeatherSuccess = function fetchWeatherSuccess(response) {\n  return {\n    type: FETCH_WEATHER_SUCCESS,\n    payload: response.data\n  };\n};\nexport var fetchWeatherFailure = function fetchWeatherFailure(error) {\n  return {\n    type: FETCH_WEATHER_FAILURE,\n    payload: error.message\n  };\n};","map":{"version":3,"sources":["/Users/kama/Desktop/CODE/Education/redux-weather-app/src/redux/actions/weatherActions.js"],"names":["axios","FETCH_WEATHER_BEGIN","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","googolemapkey","API_KEY","fetchWeather","region","latitude","longitude","getDataByCity","getDataByCoords","location","dispatch","get","then","response","fetchWeatherSuccess","catch","error","fetchWeatherFailure","fetchWeatherBegin","type","payload","data","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,qBAFF,EAGEC,qBAHF,QAIO,qBAJP;AAMA,IAAMC,aAAa,GAAG,yCAAtB;AAEA,IAAMC,OAAO,GAAG,kCAAhB,C,CACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAAA,aACHA,MAAM,IAAI,EADP;AAAA,MAC3BC,QAD2B,QAC3BA,QAD2B;AAAA,MACjBC,SADiB,QACjBA,SADiB;;AAGnC,MAAMC,aAAa,gEAAyDH,MAAzD,oBAAyEF,OAAzE,CAAnB;AACA,MAAMM,eAAe,kEAA2DH,QAA3D,kBAA2EC,SAA3E,oBAA8FJ,OAA9F,CAArB;AAEA,MAAIO,QAAQ,GAAG,OAAOL,MAAP,KAAmB,QAAnB,GAA8BI,eAA9B,GAAgDD,aAA/D;AAEA,SAAO,UAAAG,QAAQ,EAAI;AACjBb,IAAAA,KAAK,CAACc,GAAN,CAAUF,QAAV,EACCG,IADD,CACM,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACI,mBAAmB,CAACD,QAAD,CAApB,CAAR;AACA,aAAOA,QAAP;AACD,KAJD,EAKCE,KALD,CAKO,UAAAC,KAAK;AAAA,aAAIN,QAAQ,CAACO,mBAAmB,CAACD,KAAD,CAApB,CAAZ;AAAA,KALZ;AAMD,GAPD;AAQD;AAED,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AACtCC,IAAAA,IAAI,EAAErB;AADgC,GAAP;AAAA,CAA1B;AAIP,OAAO,IAAMgB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAD,QAAQ;AAAA,SAAK;AAC9CM,IAAAA,IAAI,EAAEpB,qBADwC;AAE9CqB,IAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAF4B,GAAL;AAAA,CAApC;AAKP,OAAO,IAAMJ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAD,KAAK;AAAA,SAAK;AAC3CG,IAAAA,IAAI,EAAEnB,qBADqC;AAE3CoB,IAAAA,OAAO,EAAEJ,KAAK,CAACM;AAF4B,GAAL;AAAA,CAAjC","sourcesContent":["import axios from 'axios';\nimport { \n  FETCH_WEATHER_BEGIN,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_FAILURE\n} from 'redux/actions/types';\n\nconst googolemapkey = 'AIzaSyDY5kZJmnORrvm1IODYBdB4sYjTOt6_maQ';\n\nconst API_KEY = '1d1ed4c5c279b3103998e234955244b6';\n// const GEOLOCATED_URL =  `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=${API_KEY}`\n// const ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n// const city = 'Warsaw';\n// const url = `${ROOT_URL}&q=${city},pl`;\n\n// pass argument: location to fetchWeather, then use it with geolocation\nexport function fetchWeather(region) {\n  const { latitude, longitude } = region || {};\n\n  const getDataByCity = `https://api.openweathermap.org/data/2.5/forecast?q=${region}&appid=${API_KEY}`;\n  const getDataByCoords = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n\n  let location = typeof(region) === \"object\" ? getDataByCoords : getDataByCity;\n\n  return dispatch => {\n    axios.get(location)\n    .then(response => {\n      dispatch(fetchWeatherSuccess(response));\n      return response; \n    })\n    .catch(error => dispatch(fetchWeatherFailure(error)));\n  };\n}\n\nexport const fetchWeatherBegin = () => ({\n  type: FETCH_WEATHER_BEGIN\n});\n\nexport const fetchWeatherSuccess = response => ({\n  type: FETCH_WEATHER_SUCCESS,\n  payload: response.data\n});\n\nexport const fetchWeatherFailure = error => ({\n  type: FETCH_WEATHER_FAILURE,\n  payload: error.message\n});"]},"metadata":{},"sourceType":"module"}