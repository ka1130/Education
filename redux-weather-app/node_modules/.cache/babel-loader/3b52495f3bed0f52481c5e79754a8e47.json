{"ast":null,"code":"import _classCallCheck from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport Geocode from 'react-geocode';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions/weatherActions';\nimport Spinner from 'components/App/Spinner';\nimport WeatherList from 'components/App/WeatherList';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      // make use of reject\n      var findUserLocation = new Promise(function (resolve, reject) {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.getCurrentPosition(function (position) {\n            resolve(position.coords);\n          }, function (error) {\n            if (error.code === error.PERMISSION_DENIED) {\n              console.error(\"Error detecting location.\");\n            }\n          });\n        }\n      });\n      findUserLocation.then(function (location) {\n        return _this.props.fetchWeather(location);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          error = _this$props.error,\n          loading = _this$props.loading,\n          weather = _this$props.weather;\n\n      if (error) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, error.message);\n      }\n\n      return React.createElement(\"section\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }) : React.createElement(WeatherList, {\n        weather: weather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var weather = _ref.weather;\n  return weather;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchWeather: fetchWeather\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/index.js"],"names":["React","Component","Geocode","connect","bindActionCreators","fetchWeather","Spinner","WeatherList","App","findUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","error","code","PERMISSION_DENIED","console","then","location","props","loading","weather","message","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;IAEMC,G;;;;;;;;;;;;;wCACgB;AAAA;;AAClB;AACA,UAAMC,gBAAgB,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxD,YAAI,iBAAiBC,SAArB,EAAgC;AAC9BA,UAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,QAAD,EAAc;AACrDL,YAAAA,OAAO,CAACK,QAAQ,CAACC,MAAV,CAAP;AACD,WAFD,EAEG,UAACC,KAAD,EAAW;AACZ,gBAAGA,KAAK,CAACC,IAAN,KAAeD,KAAK,CAACE,iBAAxB,EAA2C;AACzCC,cAAAA,OAAO,CAACH,KAAR,CAAc,2BAAd;AACD;AACF,WAND;AAOD;AACF,OAVwB,CAAzB;AAYAT,MAAAA,gBAAgB,CAACa,IAAjB,CAAsB,UAAAC,QAAQ;AAAA,eAAI,KAAI,CAACC,KAAL,CAAWnB,YAAX,CAAwBkB,QAAxB,CAAJ;AAAA,OAA9B;AACD;;;6BAEQ;AAAA,wBAC6B,KAAKC,KADlC;AAAA,UACCN,KADD,eACCA,KADD;AAAA,UACQO,OADR,eACQA,OADR;AAAA,UACiBC,OADjB,eACiBA,OADjB;;AAGP,UAAIR,KAAJ,EAAW;AACT,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,KAAK,CAACS,OAAV,CAAP;AACD;;AAED,aACE;AAAS,QAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEIF,OAAO,GACL,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,GAEL,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJN,CADF;AASD;;;;EAlCezB,S;;AAqClB,IAAM2B,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGF,OAAH,QAAGA,OAAH;AAAA,SAAiBA,OAAjB;AAAA,CAAxB;;AAEA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SACjC1B,kBAAkB,CAAC;AAAEC,IAAAA,YAAY,EAAZA;AAAF,GAAD,EAAmByB,QAAnB,CADe;AAAA,CAAnC;;AAIA,eAAe3B,OAAO,CAACyB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CrB,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Geocode from 'react-geocode';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions/weatherActions';\n\nimport Spinner from 'components/App/Spinner';\nimport WeatherList from 'components/App/WeatherList';\n\nclass App extends Component {\n  componentDidMount() {\n    // make use of reject\n    const findUserLocation = new Promise((resolve, reject) => {\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          resolve(position.coords);\n        }, (error) => {\n          if(error.code === error.PERMISSION_DENIED) {\n            console.error(\"Error detecting location.\");\n          }\n        });\n      }\n    })\n\n    findUserLocation.then(location => this.props.fetchWeather(location));\n  }\n\n  render() {\n    const { error, loading, weather } = this.props;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    return (\n      <section className=\"section\">\n        {\n          loading\n          ? <Spinner />\n          : <WeatherList weather={weather}/>\n        }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}