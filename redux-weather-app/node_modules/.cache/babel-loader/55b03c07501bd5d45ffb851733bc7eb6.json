{"ast":null,"code":"import _classCallCheck from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions';\nimport Spinner from 'components/App/Spinner';\nimport WeatherList from 'components/App/WeatherList';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      userLocation: {\n        lat: 32,\n        lng: 32\n      },\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.fetchWeather();\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n\n        _this2.setState({\n          userLocation: {\n            lat: latitude,\n            lng: longitude\n          },\n          loading: false\n        });\n      }, function () {\n        _this2.setState({\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          error = _this$props.error,\n          loading = _this$props.loading,\n          weather = _this$props.weather;\n\n      if (error) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, error.message);\n      }\n\n      return React.createElement(\"section\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }) : React.createElement(WeatherList, {\n        weather: weather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var weather = _ref.weather;\n  return weather;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchWeather: fetchWeather\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/index.js"],"names":["React","Component","connect","bindActionCreators","fetchWeather","Spinner","WeatherList","App","state","userLocation","lat","lng","loading","props","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","error","weather","message","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AAAEC,MAAAA,YAAY,EAAE;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,GAAG,EAAE;AAAhB,OAAhB;AAAsCC,MAAAA,OAAO,EAAE;AAA/C,K;;;;;;wCAEY;AAAA;;AAClB,WAAKC,KAAL,CAAWT,YAAX;AACAU,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACE,UAAAC,QAAQ,EAAI;AAAA,+BACsBA,QAAQ,CAACC,MAD/B;AAAA,YACFC,QADE,oBACFA,QADE;AAAA,YACQC,SADR,oBACQA,SADR;;AAGV,QAAA,MAAI,CAACC,QAAL,CAAc;AACZZ,UAAAA,YAAY,EAAE;AAAEC,YAAAA,GAAG,EAAES,QAAP;AAAiBR,YAAAA,GAAG,EAAES;AAAtB,WADF;AAEZR,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OARH,EASE,YAAM;AACJ,QAAA,MAAI,CAACS,QAAL,CAAc;AAAET,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD,OAXH;AAaD;;;6BAEQ;AAAA,wBAC6B,KAAKC,KADlC;AAAA,UACCS,KADD,eACCA,KADD;AAAA,UACQV,OADR,eACQA,OADR;AAAA,UACiBW,OADjB,eACiBA,OADjB;;AAGP,UAAID,KAAJ,EAAW;AACT,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,KAAK,CAACE,OAAV,CAAP;AACD;;AAED,aACE;AAAS,QAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEIZ,OAAO,GACL,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,GAEL,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEW,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJN,CADF;AASD;;;;EApCetB,S;;AAuClB,IAAMwB,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGF,OAAH,QAAGA,OAAH;AAAA,SAAiBA,OAAjB;AAAA,CAAxB;;AAEA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SACjCxB,kBAAkB,CAAC;AAAEC,IAAAA,YAAY,EAAZA;AAAF,GAAD,EAAmBuB,QAAnB,CADe;AAAA,CAAnC;;AAIA,eAAezB,OAAO,CAACuB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CnB,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions';\n\nimport Spinner from 'components/App/Spinner';\nimport WeatherList from 'components/App/WeatherList';\n\nclass App extends Component {\n  state = { userLocation: { lat: 32, lng: 32 }, loading: true };\n\n  componentDidMount() {\n    this.props.fetchWeather();\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n  \n        this.setState({\n          userLocation: { lat: latitude, lng: longitude },\n          loading: false\n        });\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  render() {\n    const { error, loading, weather } = this.props;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    return (\n      <section className=\"section\">\n        {\n          loading\n          ? <Spinner />\n          : <WeatherList weather={weather}/>\n        }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}