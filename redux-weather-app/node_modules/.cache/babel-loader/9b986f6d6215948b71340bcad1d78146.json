{"ast":null,"code":"import _classCallCheck from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kama/Desktop/CODE/Education/redux-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/WeatherCharts/index.js\";\nimport React, { Component } from 'react';\nimport { v4 } from 'node-uuid';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions';\nimport Spinner from 'components/App/Spinner';\n\nvar WeatherCharts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherCharts, _Component);\n\n  function WeatherCharts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherCharts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherCharts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderWeather = function (data) {\n      var name = data.city.name;\n      var temps = data.list.map(function (weather) {\n        return weather.main.temp;\n      });\n      var pressures = data.list.map(function (weather) {\n        return weather.main.pressure;\n      });\n      var humidities = data.list.map(function (weather) {\n        return weather.main.humidity;\n      });\n      var _data$city$coord = data.city.coord,\n          lon = _data$city$coord.lon,\n          lat = _data$city$coord.lat; // console.log(data);\n      // const { name } = data.city;\n      // const temps = \n\n      return React.createElement(\"tr\", {\n        key: v4(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"test \", name)) // <tr key={v4()}>\n      //   <td>{name}</td>\n      // </tr>\n      ;\n    };\n\n    return _this;\n  }\n\n  _createClass(WeatherCharts, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.weather.list) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"table\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        className: \"has-background-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Temperature\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Pressure \"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Humidity\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.props.weather.weather.map(this.renderWeather))));\n    }\n  }]);\n\n  return WeatherCharts;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var weather = _ref.weather;\n  return weather;\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchWeather: fetchWeather\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCharts);","map":{"version":3,"sources":["/Users/kama/Desktop/CODE/Education/redux-weather-app/src/components/App/WeatherCharts/index.js"],"names":["React","Component","v4","connect","bindActionCreators","fetchWeather","Spinner","WeatherCharts","renderWeather","data","name","city","temps","list","map","weather","main","temp","pressures","pressure","humidities","humidity","coord","lon","lat","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,EAAT,QAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;;IAEMC,a;;;;;;;;;;;;;;;;;;UAKJC,a,GAAgB,UAACC,IAAD,EAAU;AACxB,UAAMC,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAUD,IAAvB;AACA,UAAME,KAAK,GAAGH,IAAI,CAACI,IAAL,CAAUC,GAAV,CAAc,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,IAAR,CAAaC,IAAjB;AAAA,OAArB,CAAd;AACA,UAAMC,SAAS,GAAGT,IAAI,CAACI,IAAL,CAAUC,GAAV,CAAc,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,IAAR,CAAaG,QAAjB;AAAA,OAArB,CAAlB;AACA,UAAMC,UAAU,GAAGX,IAAI,CAACI,IAAL,CAAUC,GAAV,CAAc,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,IAAR,CAAaK,QAAjB;AAAA,OAArB,CAAnB;AAJwB,6BAKHZ,IAAI,CAACE,IAAL,CAAUW,KALP;AAAA,UAKhBC,GALgB,oBAKhBA,GALgB;AAAA,UAKXC,GALW,oBAKXA,GALW,EAMxB;AACA;AACA;;AAEA,aACE;AAAI,QAAA,GAAG,EAAEtB,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAUQ,IAAV,CAAf,CADF,CAEE;AACA;AACA;AAJF;AAMD,K;;;;;;;wCApBmB;AAClB,WAAKe,KAAL,CAAWpB,YAAX;AACD;;;6BAoBQ;AACP,UAAI,CAAC,KAAKoB,KAAL,CAAWV,OAAX,CAAmBF,IAAxB,EAA8B;AAC5B,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE,0CACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKY,KAAL,CAAWV,OAAX,CAAmBA,OAAnB,CAA2BD,GAA3B,CAA+B,KAAKN,aAApC,CADH,CATF,CADF,CADF;AAiBD;;;;EA7CyBP,S;;AAgD5B,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGX,OAAH,QAAGA,OAAH;AAAA,SAAiBA,OAAjB;AAAA,CAAxB;;AAEA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SACjCxB,kBAAkB,CAAC;AAAEC,IAAAA,YAAY,EAAZA;AAAF,GAAD,EAAmBuB,QAAnB,CADe;AAAA,CAAnC;;AAIA,eAAezB,OAAO,CAACuB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CpB,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { v4 } from 'node-uuid';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from 'redux/actions';\n\nimport Spinner from 'components/App/Spinner';\n\nclass WeatherCharts extends Component {\n  componentDidMount() {\n    this.props.fetchWeather();\n  }\n\n  renderWeather = (data) => {\n    const name = data.city.name;\n    const temps = data.list.map(weather => weather.main.temp);\n    const pressures = data.list.map(weather => weather.main.pressure);\n    const humidities = data.list.map(weather => weather.main.humidity);\n    const { lon, lat } = data.city.coord;\n    // console.log(data);\n    // const { name } = data.city;\n    // const temps = \n\n    return (\n      <tr key={v4()}><td>test {name}</td></tr>\n      // <tr key={v4()}>\n      //   <td>{name}</td>\n      // </tr>\n    );\n  }\n\n  render() {\n    if (!this.props.weather.list) {\n      return <Spinner />;\n    }\n\n    return (\n      <>\n        <table className=\"table\">\n          <thead className=\"has-background-light\">\n            <tr>\n              <th>City</th>\n              <th>Temperature</th>\n              <th>Pressure </th>\n              <th>Humidity</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.weather.weather.map(this.renderWeather)}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n}\n\nconst mapStateToProps = ({ weather }) => weather;\n\nconst mapDispatchToProps = dispatch => (\n  bindActionCreators({ fetchWeather }, dispatch)\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCharts);\n"]},"metadata":{},"sourceType":"module"}